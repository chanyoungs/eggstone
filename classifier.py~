import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
import keras
from keras.models import load_model
from keras.preprocessing.image import load_img, img_to_array
import matplotlib.pyplot as plt

# model = load_model(filepath_acc)
model = load_model("./saved_models/defect_hunter_best_loss.h5")

# Normalize data.
x_train = x_train.astype('float32') / 255
x_val = x_val.astype('float32') / 255
x_test = x_test.astype('float32') / 255

# If subtract pixel mean is enabled

x_train_mean = np.mean(x_train, axis=0)
x_train -= x_train_mean
x_val -= x_train_mean
x_test -= x_train_mean



x_train, _, _, _ = train_test_split(x, y, test_size=0.2, shuffle=True, random_state=33)
x_train_mean = np.mean(x_train, axis=0)

def running():
  img_pil = load_img("Set04-good.01.01.jpg")
  img_pil.thumbnail((64, 64))
  img_pil = img_to_array(img_pil)

  x_sample = img_pil.astype('float32') / 255
  x_sample -= x_train_mean

  model.predict(x_sample.reshape(1, 64, 64, 3))
